<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns="http://psoa.ruleml.org/lang/spec#" 
  targetNamespace="http://psoa.ruleml.org/lang/spec#" 
  elementFormDefault="qualified" 
  version="Id: PSOARule.xsd, v. 1.0, 2011-10-19">
  <xs:annotation>
    <xs:documentation>
      
      Last updated: 2014-12-29

    This is the tentative XML schema for the Rule Language as defined by
    the PSOA RuleML Published at http://www.cs.unb.ca/~boley/papers/SemanticsPsoaRules.pdf

    The schema is based on the following EBNF for the PSOA Rule Language:
  
  Document  ::= 'Document' '(' Base? Prefix* Import* Group? ')'
  Base      ::= 'Base' '(' ANGLEBRACKIRI ')'
  Prefix    ::= 'Prefix' '(' Name ANGLEBRACKIRI ')'
  Import    ::= 'Import' '(' ANGLEBRACKIRI PROFILE? ')'
  Group     ::= 'Group' '(' (RULE | Group)* ')'
  RULE      ::= ('Forall' Var+ '(' CLAUSE ')') | CLAUSE
  CLAUSE    ::= Implies | ATOMIC
  Implies   ::= (HEAD | 'And' '(' HEAD* ')') ':-' FORMULA
  HEAD      ::= ATOMIC | 'Exists' Var+ '(' ATOMIC ')'
  PROFILE   ::= ANGLEBRACKIRI
      
    </xs:documentation>
  </xs:annotation>
  <!-- The Rule Language includes the Condition Language from the same directory -->
  <xs:include schemaLocation="PSOACond.xsd"/>
  <xs:element name="Document">
    <!--
  Document  ::= 'Document' '(' Base? Prefix* Import* Group? ')'
    -->
    <xs:complexType>
      <xs:sequence>
	  <xs:group ref="IRIMETA" minOccurs="0" maxOccurs="1"/>
        <xs:element ref="directive" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="payload" minOccurs="0" maxOccurs="1"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="directive">
    <!--
  Base and Prefix represented directly in XML
    -->
    <xs:complexType>
      <xs:sequence>        
        <xs:element ref="Import"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="payload">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Group"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="Import">
    <!--
  Import    ::= IRIMETA? 'Import' '(' LOCATOR PROFILE? ')'
  LOCATOR   ::= ANGLEBRACKIRI
  PROFILE   ::= ANGLEBRACKIRI
    -->
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="location"/>
        <xs:element ref="profile" minOccurs="0" maxOccurs="1"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="location" type="xs:anyURI"/>

  <xs:element name="profile" type="xs:anyURI"/>

  <xs:element name="Group">
    <!--
  Group     ::= 'Group' '(' (RULE | Group)* ')'
    -->
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="sentence" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="sentence">
    <xs:complexType>
      <xs:choice>
        <xs:group ref="RULE"/>
        <xs:element ref="Group"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:group name="RULE">
    <!--
  RULE      ::= ('Forall' Var+ '(' CLAUSE ')') | CLAUSE
    -->
    <xs:choice>
      <xs:element ref="Forall"/>
      <xs:group ref="CLAUSE"/>
    </xs:choice>
  </xs:group>
  <xs:element name="Forall">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="declare" minOccurs="1" maxOccurs="unbounded"/>
        <!-- different from formula in And, Or and Exists -->
        <xs:element name="formula">
          <xs:complexType>
            <xs:group ref="CLAUSE"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:group name="CLAUSE">
    <!--
  CLAUSE   ::= Implies | ATOMIC
    -->
    <xs:choice>
      <xs:element ref="Implies"/>
      <!--xs:group ref="ATOMIC"/-->
      <xs:group ref="HEAD"/>
    </xs:choice>
  </xs:group>
  <xs:element name="Implies">
    <!--
  Implies   ::= (HEAD | 'And' '(' HEAD* ')') ':-' FORMULA
    -->
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="if"/>
        <xs:element ref="then"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
   FORMULA
  -->
  <xs:element name="if">
    <xs:complexType>
      <xs:sequence>
        <xs:group ref="FORMULA"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
   (HEAD | 'And' '(' HEAD* ')')
    -->
  <xs:element name="then">
    <xs:complexType>
      <xs:choice>
        <xs:group ref="HEAD"/>
        <xs:element name="And" type="And-then.type"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!--
   'And' '(' HEAD* ')'
    -->
  <xs:complexType name="And-then.type">
    <xs:sequence>
      <xs:element name="formula" type="formula-and-then.type" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="formula-and-then.type">
    <xs:sequence>
      <xs:group ref="HEAD"/>
    </xs:sequence>
  </xs:complexType>
  <!--
   HEAD
    -->
  <xs:group name="HEAD">
    <!--
  HEAD      ::= ('Exists' Var+ '(' ATOMIC ')') | ATOMIC   
    -->
    <xs:choice>
      <xs:group ref="ATOMIC"/>
      <xs:element name="Exists" type="Exists-then.type"/>
    </xs:choice>
  </xs:group>
  <!--
  ('Exists' Var+ '(' ATOMIC ')')
    -->
  <xs:complexType name="Exists-then.type">
    <xs:sequence>
      <xs:element ref="declare" minOccurs="1" maxOccurs="unbounded"/>
      <xs:element name="formula" type="formula-exists-then.type"/>
    </xs:sequence>
  </xs:complexType>
  <!--
  ATOMIC   
    -->
  <xs:complexType name="formula-exists-then.type">
    <xs:sequence>
      <xs:group ref="ATOMIC"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>
